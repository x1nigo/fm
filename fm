#!/usr/bin/env bash

# fm - a simple terminal file-manager written in bash
# Created by Chris IÃ±igo <https://github.com/x1nigo/fm>

# Setup the terminal
setup_terminal() {
	# Clear screen and hide cursor
	printf '\e[?25l\e[2J\e[1;r'

	# Hide user input
	stty -echo
}

# Reset terminal
reset_terminal()  {
	# Clear screen and show cursor
	printf '\e[?25h\e[2J\e[1;r'

	# Show user input
	stty echo
}

# Prints the current directory
status_line() {
	local tagged_info="-- [${#tagged_files[@]}] tagged --"
	# Print at the bottom of the terminal
	printf "\e[%sH\e[1m%d/%d %s %s\e[K\e[m" \
		"$((LINES-1))" \
		"$((scroll+1))" \
		"$list_total"\
		"${tagged_files[*]:+${tagged_info}}" \
		"$PWD"
	# Set the window name
	printf '\e]2;file-manager -> %s\e'\\ "$PWD"
}

cmd_line() {
	printf '\e[%sH\e[1;33m\e[?25h%s\e[m' "$((LINES))" "$1"
	stty echo
}

redraw() {
	read_dir
	clear
	draw_dir
	status_line
}

# List the contents of your current working directory
read_dir() {
	# Array variables to display directories first
	local dirs
	local files

	# Add specific files in certain arrays
	for item in *; do
		if [[ -d "$item" ]]; then
			dirs+=("$item")
		else
			files+=("$item")
		fi
	done

	# Compile all files to be displayed (in order)
	list=("${dirs[@]}" "${files[@]}")

	# Directory is empty
	[[ ${list[0]} == "*" ]] && list[0]=empty

	# Total number of files in array
	list_total="${#list[@]}"
}

print_dir() {
	local format
	local suffix

		# If the dir item doesn't exist, end here.
		if [[ ${list[0]} == "*" ]]; then
			return
		# Directories
		elif [[ -d ${list[$1]} ]]; then
			format='\e[1;34m'
			suffix=/
		# Executable files
		elif [[ -x ${list[$1]} ]]; then
			format='\e[1;32m'
		fi
		# Tagged files
		if [[ ${tagged_files[$1]} == "${list[$1]}" ]]; then
			format+='\e[31m'
			suffix+=*
		fi
		# User's focus
		# Use '\033[K' if you want to extend it to the end of the line
		if [[ $1 == $scroll ]]; then
			format+='\e[30;41m'
		fi

		# Print the formatted line
		printf "\r${format}%s${suffix}\e[m\r" "${list[$1]}"
}

draw_dir() {
	printf '\e[H'
	for ((i=0;i<$list_total;i++)) {
		print_dir "$i"
		printf '\n'
	}
}

action() {
	[[ -d "${list[scroll]}" ]] && { cd "${list[scroll]}" && scroll=0 ; } &&
		{ printf "%s" "$PWD" > ${XDG_CACHE_HOME:-$HOME/.cache}/sf/.sf_d ; redraw && return; } || \
		case "$(file --mime-type -b "${list[scroll]}")" in
			audio/*|video/*)
				mpv "${list[scroll]}" ||
					xdg-open "${list[scroll]}" >/dev/null 2>&1
				;;
			image/*)
				nsxiv "${list[scroll]}" ||
					xdg-open "${list[scroll]}" >/dev/null 2>&1
				;;
			*/pdf)
				zathura "${list[scroll]}" ||
					xdg-open "${list[scroll]}" >/dev/null 2>&1
				;;
			*)
				reset_terminal
				$EDITOR "${list[scroll]}" ||
					xdg-open "${list[scroll]}" >/dev/null 2>&1
				;;
		esac
		setup_terminal
		draw_dir
		status_line
}

# Don't make an action if directory is empty
avoid() { [[ "${list[scroll]}" != "empty" ]] ; }

# This is really just the delete function
delete() {
	cmd_line "Delete file(s)? [y/N] "
	read -n 1 ans
	[[ "$ans" != "y" ]] && return

	# Delete marked files
	if [[ -z ${tagged_files[@]} ]]; then
		rm -rf "${list[scroll]}"
	else
		for i in "${tagged_files[@]}"; do
			rm -rf "$i"
		done
		tagged_files=()
	fi
}

# Rename your file [can also be used to move]
rename() {
	cmd_line "\"${list[scroll]}\" Rename: "
	read ans
	[[ -z "$ans" ]] && return
	mv "${list[scroll]}" "$ans"
}

# Create a new file
create_file() {
	cmd_line "New file: "
	read ans
	[[ -z "$ans" ]] && return
	touch "$ans"
}

# Create a directory
create_dir() {
	cmd_line "New directory: "
	read ans
	[[ -z "$ans" ]] && return
	mkdir -p "$ans"
}

# Copy files
copy() {
	if [[ -x "$(command -v fzf)" ]]; then
		reset_terminal
		dest="$(find $HOME -type d | sed "s|$HOME|~|" | fzf --height=20% --no-separator --reverse --prompt='Copy to: ')"
		dest="$(echo "$dest" | sed "s|~|$HOME|")"
		[[ -z "$dest" ]] && return

		# Copy marked files
		if [[ -z ${tagged_files[@]} ]]; then
			cp -r "${list[scroll]}" "$dest"
		else
			for i in "${tagged_files[@]}"; do
				cp -r "$i" "$dest"
			done
			tagged_files=()
		fi
	else
		cmd_line "Copy \"${list[scroll]}\" to: "
		read ans
		[[ -z "$ans" ]] && return
		cp -vr "${list[scroll]}" "$ans"
	fi
}

# Move files
move() {
	if [[ -x "$(command -v fzf)" ]]; then
		reset_terminal
		dest="$(find $HOME -type d | sed "s|$HOME|~|" | fzf --height=20% --no-separator --reverse --prompt='Move to: ')"
		dest="$(echo "$dest" | sed "s|~|$HOME|")"
		[[ -z "$dest" ]] && return

		# Move marked files
		if [[ -z ${tagged_files[@]} ]]; then
			mv "${list[scroll]}" "$dest"
		else
			for i in "${tagged_files[@]}"; do
				mv "$i" "$dest"
			done
			tagged_files=()
		fi
	else
		cmd_line "Move \"${list[scroll]}\" to: "
		read ans
		[[ -z "$ans" ]] && return
		mv "${list[scroll]}" "$ans"
	fi
}

# Tag files for further action
tag_file() {
	if [[ ${tagged_files[$1]} == ${list[$1]} ]]; then
		unset 'tagged_files[$1]'
	else
		tagged_files[$1]="${list[$1]}"
	fi
}

bulk_rename() {
	tmpfile_old="$(mktemp)"
	tmpfile_new="$(mktemp)"

	[[ -z ${tagged_files[@]} ]] && return

	for item in "${tagged_files[@]}"; do
		echo "$item" >> "$tmpfile_old"
		echo "$item" >> "$tmpfile_new"
	done
	$EDITOR "$tmpfile_new"

	[[ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ]] ||
		{ rm -rf "$tmpfile_old" "$tmpfile_new"; return; }

	paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [[ "$src" == "$dst" ]] || [[ -e "$dst" ]] || mv -- "$src" "$dst"
    done

	# Remove the temporary files
	rm -f "$tmpfile_old" "$tmpfile_new"
	tagged_files=()
}

keybinds() {
	clear
# Main output
cat << EOF
Keybindings:

j		go down
k		go up
q		quit
l		interact
h		go to previous directory
~		go to home directory
t		tag a file
D		delete
N		new file
M		new directory
R		rename
b		bulk rename (only with marked files)
g		go to top
G		go to botttom
c		copy
m		move
.		show/hide hidden files
@		refresh the file-manager
?		read this help page
EOF

	# Wait for user to press return
	printf "\\n%s" "Press \`enter\` to exit help page."
	read -r enter
}

keys() {
	escape_char=$(printf "\u1b")
	if [[ $input == $escape_char ]]; then
		read -srn 2 input
	fi
	case $input in
		# Go down
		j|'[B')
			if [[ "$scroll" -lt "$((list_total-1))" ]]; then
				((scroll++))
				printf '\e[%sH' "$scroll"
				print_dir "$((scroll-1))"
				printf '\n'
				print_dir "$scroll"
				status_line
			fi
			;;
		# Go up
		k|'[A')
			if [[ "$scroll" -gt 0 ]]; then
				((scroll--))
				printf '\e[%sH' "$((scroll+2))"
				print_dir "$((scroll+1))"
				printf '\e[A'
				print_dir "$scroll"
				status_line
			fi
			;;
		# Quit
		q)
			reset_terminal && exit
			;;
		# Action
		l|\
		'[C'|\
		'[OC'|\
		'')
			avoid && action
			;;
		# Go to previous directory
		h|\
		'[D'|\
		'[OD')
			cd ../ && scroll=0
			printf "%s" "$(readlink -f "$PWD")" > ${XDG_CACHE_HOME:-$HOME/.cache}/sf/.sf_d
			redraw
			;;
		# Go to home directory
		'~')
			cd && scroll=0
			printf "%s" "$(readlink -f "$PWD")" > ${XDG_CACHE_HOME:-$HOME/.cache}/sf/.sf_d
			redraw
			;;
		# Tag file(s)
		t)
			avoid && tag_file "$scroll"
			clear
			draw_dir
			status_line
			;;
		# Bulk rename
		b)
			bulk_rename
			setup_terminal
			redraw
			;;
		# Copy file(s)
		c)
			avoid && copy && scroll=0
			setup_terminal
			redraw
			;;
		# Move file(s)
		m)
			avoid && move && scroll=0
			setup_terminal
			redraw
			;;
		# Rename a file/directory
		R)
			avoid && rename
			setup_terminal
			redraw
			;;
		# Delete a file
		D)
			avoid && delete && scroll=0
			setup_terminal
			redraw
			;;
		# Create a file
		N)
			create_file
			setup_terminal
			redraw
			;;
		# Create a directory
		M)
			create_dir
			setup_terminal
			redraw
			;;
		# Go to top of list
		g)
			scroll=0
			draw_dir
			status_line
			;;
		# Go to bottom of list
		G)
			scroll="$((list_total-1))"
			draw_dir
			status_line
			;;
		# Show hidden files
		.)
			shopt_flags=(u s)
			[[ $hidden == 0 ]] && hidden=1 || hidden=0
			shopt -"${shopt_flags[$hidden]}" dotglob
			scroll=0
			redraw
			;;
		@)
			setup_terminal
			redraw
			;;
		?)
			keybinds && {
				clear
				draw_dir
				status_line
			}
			;;
	esac
}

# The main function that runs every time
main() {
	mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/sf"
	hidden=0
	scroll=0
	setup_terminal
	redraw
	for ((;;)); {
		read -srn 1 input && keys
	}
}

main
