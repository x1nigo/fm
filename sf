#!/usr/bin/env bash

# sf - a terminal file-manager
# Created by Chris IÃ±igo <https://github.com/x1nigo/sf>

# Setup the terminal
setup_terminal() {
	# Clear screen and hide cursor
	printf '\e[?25l\e[2J\e[1;r'

	# Hide user input
	stty -echo
}

# Reset terminal
reset_terminal()  {
	# Clear screen and show cursor
	printf '\e[?25h\e[2J\e[1;r'

	# Show user input
	stty echo
}

# Prints the current directory
status_line() {
	# Print at the bottom of the terminal
	printf "\e[%sH\e[m(%d/%d) %s\e[m" \
		"$((LINES-1))" \
		"$scroll" \
		"$list_total"\
		"$PWD"
	# Set the window name
	printf '\e]2;sf %s\e'\\ "$PWD"
}

command_line() {
	printf '\e[%sH\e[?25h%s' "$((LINES))" "$1"
	stty echo
}

redraw() {
	read_dir
	clear
	print_dir
	status_line
}

# List the contents of your current working directory
read_dir() {
	# Array variables to display directories first
	local dirs
	local files

	# Add specific files in certain arrays
	for item in *; do
		if [[ -d "$item" ]]; then
			dirs+=("$item")
		else
			files+=("$item")
		fi
	done

	# Compile all files to be displayed (in order)
	list=("${dirs[@]}" "${files[@]}")

	# Directory is empty
	[[ ${list[0]} == "*" ]] && list[0]=empty

	# Total number of files in array
	list_total="${#list[@]}"
}

print_dir() {
	for ((i=0;i<$list_total;i++)) {
		# If the dir item doesn't exist, end here.
		if [[ ${list[0]} == "*" ]]; then
			return
		elif [[ -d "${list[$i]}" ]]; then
			format='\e[1m'
			suffix=/
		elif [[ -x "${list[$i]}" ]]; then
			format='\e[3m'
			suffix=
		else
			format='\e[m'
			suffix=
		fi

		if [[ "${marked_files[@]}" =~ "${list[$i]}" ]]; then
			format='\e[1;31m'
			suffix=*
		fi
		# Use '\033[K' if you want to extend it to the end of the line
		if [[ $((i+1)) == $scroll ]]; then
			format='\e[1;30;41m'
		fi

		# Print the formatted line
		printf "${format}%s${suffix}\e[m\\n" "${list[$i]}"
	}
}

action() {
	[[ -d "${list[((scroll-1))]}" ]] && { cd "${list[((scroll-1))]}" && scroll=1 ; } &&
		printf "%s" "$(readlink -f "$PWD")" > ${XDG_CACHE_HOME:-$HOME/.cache}/sf/.sf_d || \
#		xdg-open "${list[((scroll-1))]}" >/dev/null 2>&1
		case "$(file --mime-type -b "${list[((scroll-1))]}")" in
			audio/*|video/*)
				mpv "${list[((scroll-1))]}"
				;;
			image/*)
				nsxiv "${list[((scroll-1))]}"
				;;
			*/pdf)
				zathura "${list[((scroll-1))]}"
				;;
			*)
				$EDITOR "${list[((scroll-1))]}"
				;;
		esac
}

# Don't make an action if directory is empty
avoid() { [[ "${list[((scroll-1))]}" != "empty" ]] ; }

# This is really just the delete function
delete() {
	command_line "Delete \"${list[((scroll-1))]}\"? [y/N] "
	read -n 1 ans
	[[ "$ans" == "y" ]] && rm -rf "${list[((scroll-1))]}"
}

# Rename your file [can also be used to move]
rename() {
	command_line "\"${list[((scroll-1))]}\" Rename: "
	read ans
	[[ -z "$ans" ]] && continue
	mv "${list[((scroll-1))]}" "$ans"
}

# Create a new file
create_file() {
	command_line "New file: "
	read ans
	[[ -z "$ans" ]] && continue
	touch "$ans"
}

# Create a directory
create_dir() {
	command_line "New directory: "
	read ans
	[[ -z "$ans" ]] && continue
	mkdir -p "$ans"
}

# Copy files
copy() {
	if [[ -x "$(command -v fzf)" ]]; then
		reset_terminal
		dest="$(find $HOME -type d | fzf --height=20% --layout=reverse --prompt='Copy to: ')"
		[[ -z "$dest" ]] && continue
		cp -r "${list[((scroll-1))]}" "$dest"
	else
		command_line "Copy \"${list[((scroll-1))]}\" to: "
		read ans
		[[ -z "$ans" ]] && continue
		cp -vr "${list[((scroll-1))]}" "$ans"
	fi
}

# Move files
move() {
	if [[ -x "$(command -v fzf)" ]]; then
		reset_terminal
		dest="$(find $HOME -type d | fzf --height=20% --layout=reverse --prompt='Move to: ')"
		[[ -z "$dest" ]] && continue
		mv "${list[((scroll-1))]}" "$dest"
	else
		command_line "Move \"${list[((scroll-1))]}\" to: "
		read ans
		[[ -z "$ans" ]] && continue
		mv "${list[((scroll-1))]}" "$ans"
	fi
}

# Mark files for further action
mark_file() {
	marked_files+=("${list[((scroll-1))]}")
}

bulk_rename() {
	tmpfile_old="$(mktemp)"
	tmpfile_new="$(mktemp)"
	tmpfile_final="$(mktemp)"

	[[ -z ${marked_files[0]} ]] && return

	for ((i=0;i<${#marked_files[@]};i++)) {
		echo "${marked_files[$i]}" >> "$tmpfile_old"
		echo "${marked_files[$i]}" >> "$tmpfile_new"
	}
	# Use your favorite text editor
	$EDITOR "$tmpfile_new"

	[[ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ]] ||
		{ rm -rf "$tmpfile_old" "$tmpfile_new"; continue; }

	paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [[ "$src" == "$dst" ]] || [[ -e "$dst" ]] || mv -- "$src" "$dst"
    done

	# Remove the temporary files
	rm -f "$tmpfile_old" "$tmpfile_new"
}

keybinds() {
	clear
# Main output
cat << EOF
Keybindings:

j	go down
k	go up
q	quit
l	interact
h	go to previous directory
~	go to home directory
D	delete
N	new file
M	new directory
R	rename
g	go to top
G	go to botttom
c	copy
m	move
.	show/hide hidden files
?	read this help page
EOF

	# Wait for user to press return
	printf "\\n%s" "Press \`enter\` to exit help page."
	read -r enter
}

keys() {
# 	[[ $1 == $'\e' ]] && {
# 		read -srn 2 key
# 		special=${1}${key}
# 	}
	case $1 in
		# Go down
		j|$'\e[B')
			if [[ "$scroll" -lt "$list_total" ]]; then
				((scroll++))
				clear
				print_dir
				status_line
			fi
			;;
		# Go up
		k|$'\e[A')
			if [[ "$scroll" -gt 1 ]]; then
				((scroll--))
				clear
				print_dir
				status_line
			fi
			;;
		# Quit
		q)
			reset_terminal && exit
			;;
		# Action
		l|\
		$'\e[C'|\
		$'\e[OC'|\
		'')
			avoid && action
			setup_terminal
			redraw
			;;
		# Go to previous directory
		h|\
		$'\e[D'|\
		$'\e[OD')
			cd ../ && scroll=1
			printf "%s" "$(readlink -f "$PWD")" > ${XDG_CACHE_HOME:-$HOME/.cache}/sf/.sf_d
			redraw
			;;
		# Go to home directory
		'~')
			cd && scroll=1
			printf "%s" "$(readlink -f "$PWD")" > ${XDG_CACHE_HOME:-$HOME/.cache}/sf/.sf_d
			redraw
			;;
		# Mark file(s) - spacebar
		' ')
			mark_file
			setup_terminal
			print_dir
			status_line
			;;
		# Bulk rename
		b)
			bulk_rename
			setup_terminal
			redraw
			;;
		# Copy file(s)
		c)
			avoid && copy && scroll=1
			setup_terminal
			print_dir
			status_line
			;;
		# Move file(s)
		m)
			avoid && move && scroll=1
			setup_terminal
			redraw
			;;
		# Rename a file/directory
		R)
			avoid && rename
			setup_terminal
			redraw
			;;
		# Delete a file
		D)
			avoid && delete && scroll=1
			setup_terminal
			redraw
			;;
		# Create a file
		N)
			create_file
			setup_terminal
			redraw
			;;
		# Create a directory
		M)
			create_dir
			setup_terminal
			redraw
			;;
		# Go to top of list
		g)
			scroll=1
			clear
			print_dir
			status_line
			;;
		# Go to bottom of list
		G)
			scroll="$list_total"
			clear
			print_dir
			status_line
			;;
		# Show hidden files
		.)
			shopt_flags=(u s)
			[[ $hidden == 0 ]] && hidden=1 || hidden=0
			shopt -"${shopt_flags[$hidden]}" dotglob
			scroll=1
			redraw
			;;
		?)
			keybinds && {
				clear
				print_dir
				status_line
			}
			;;
	esac
}

# The main function that runs every time
main() {
	mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/sf"
	hidden=0
	scroll=1
	setup_terminal
	redraw
	while :; do
		read -srn 1 && keys "$REPLY"
	done
}

main
